// debuno 0.1.31
import{b as y,c as v,d as L,e as R,l as x,m as h,p as b,q as N,s as w,t as m,v as p}from"./chunk-SWRUKNDJ.js";import O from"node:process";function S(l,t){let{onResolve:d,onLoad:M}=l,f=0;l.onResolve=(s,a)=>d(s,o=>{o={...o},s.namespace&&(o.namespace=s.namespace),t.before&&t.before("resolve",{args:o});let e=a(o,l);return f++,t.after&&e&&t.after("resolve",{index:f,specifier:(o.namespace!=="file"?o.namespace+":":"")+o.path,resolved:e,importer:o.importer}),e});let u=0;l.onLoad=(s,a)=>M(s,async o=>{o={...o},s.namespace&&(o.namespace=s.namespace),t.before&&t.before("load",{args:o});let e=await a(o,l);return u++,t.after&&t.after("load",{index:u,specifier:h(o).href,...e}),e})}var k=new Map;function B({generated:l}={}){return{name:"debuno-import-resolution",setup(t){S(t,{before(e,{args:n}){if(v)switch(e){case"resolve":m(e,n.namespace,n.path,n.importer);break;case"load":m(e,n.namespace,n.path);break}},after(e,n){if(!v)return;let r=`./preload.${e}.json`,c=y.readJSONFileSync(r,[]);switch(e){case"resolve":m(e,n),c.push(n);break;case"load":m(e,{...n,contents:""}),c.push({...n,contents:n?.contents?.toString()});break}y.writeJSONFileSync(`./preload.${e}.json`,c)}});let d=e=>e.startsWith(".")||e.startsWith("/"),M=new Map,f=p.nodeModulesDir,u=null;(f==="auto"||f==="manual")&&(u=L.join(p.options.cwd,"node_modules"));function s(e,n){k.has(e)||e==="bun"||(k.set(e,n),t.module(e,()=>({loader:"js",contents:`export * from "${n}"`})))}function a(e){if((e.importer==="bun:main"||e.importer===O.argv[1])&&e.importer==="bun:main"&&p.cacheSync(e.path),b(e)){if(w.has(e.path)||w.has("node:"+e.path))return{path:e.path,external:!0};if(u!==null)return}if(e.namespace==="file"&&N(e.importer))return x(new URL(e.path,e.importer));if(e.namespace==="file"&&d(e.path))try{let n=e.importer,r=n==="bun:main"?R(p.options.cwd).href:R(n).href,c=p.info(e.path,r);c.dependencies&&c.dependencies.filter(i=>!d(i.specifier)&&i.specifier!==i.code?.specifier&&i.specifier!==i.type?.specifier).map(i=>[i.specifier,i.code?.specifier||i.type?.specifier]).forEach(i=>s.apply(null,i))}catch(n){console.log("	map",e,n.message)}if(!(!e.namespace||e.namespace==="file"))try{let n=h(e),r=p.loader.resolve(n);switch(r.kind){case"npm":return{path:r.packageName};case"esm":return x(r.specifier);case"node":return{path:r.path,external:!0}}}catch(n){console.error("x10",n.message);return}}async function o(e,n){try{let r=h(e);return await p.loader.loadEsm(r,l)||null}catch(r){return console.error("x20",r.message),null}}t.onResolve({filter:/.*/,namespace:"jsr"},a),t.onResolve({filter:/.*/,namespace:"npm"},a),t.onResolve({filter:/.*/,namespace:"node"},a),t.onResolve({filter:/.*/,namespace:"file"},a),t.onLoad({filter:/.*/,namespace:"http"},o),t.onLoad({filter:/.*/,namespace:"https"},o)}}}function I(){Bun.plugin(B())}navigator.userAgent.includes("Bun")&&I();
//# sourceMappingURL=data:application/json;base64,
