// debuno 0.1.29
import{e as f,m as l,v as a}from"./chunk-YRQ3LC62.js";import A from"node:module";import c from"node:process";import{MessageChannel as L}from"node:worker_threads";import{pathToFileURL as R}from"node:url";import g from"node:process";import{fileURLToPath as h}from"node:url";function m(e){let i=["http","https","jsr","npm"],t=R(g.cwd()+"/").href,n=e.replace(t,""),o=i.find(s=>n.startsWith(`${s}:`));if(o){let s=n.replace(`${o}:`,""),d=l({namespace:o,path:s}).href;return{url:e,resolveDir:t,namespace:o,path:s,resolved:d}}let r=h(e),p=l({namespace:"file",path:r}).href;return{url:e,resolveDir:t,namespace:"file",path:r,resolved:p}}function y(e,i){async function t(n){if(!n.prop||!n.id)throw new TypeError(`Invalid request: 
${JSON.stringify(n,null,4)}`);let{id:o,prop:r,args:p}=n,s={id:o};try{s.result=typeof e[r]=="function"?await e[r].apply(e,p):e[r]}catch(d){s.error=d}i(s)}return{handleRequest:t}}function k(e){let i=0,t={};function n(r,...p){let s={id:++i,prop:r,args:p},{promise:d,resolve:u,reject:v}=Promise.withResolvers();return e(s),t[s.id]={resolve:u,reject:v},d}function o(r){r.error?t[r.id].reject(r.error):t[r.id].resolve(r.result),delete t[r.id]}return{request:n,response:o,promises:t}}function N(e){c.setSourceMapsEnabled(!0);let{port1:i,port2:t}=new L,{handleRequest:n}=y(a,r=>i.postMessage(r));i.on("message",n),i.unref(),e?.onResolve&&a.addEventListener("resolve",e.onResolve),e?.onResolved&&a.addEventListener("resolved",e.onResolved),e?.onLoad&&a.addEventListener("load",e.onLoad),e?.onLoaded&&a.addEventListener("loaded",e.onLoaded);let o=null;if(c.argv[1]&&(o=c.argv[1].startsWith("-")?null:m(f(c.argv[1]).href).resolved,o))try{a.cacheSync(o)}catch(r){console.log(r.message)}A.register("./node/index.js",{parentURL:import.meta.url,data:{main:o,port:t,eventNames:a.eventNames},transferList:[t]})}export{m as a,k as b,N as c};
//# sourceMappingURL=data:application/json;base64,
