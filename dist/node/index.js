// debuno 0.1.32
import{a as y,b as w,c as v}from"../chunk-I4XNODBU.js";import{a as d,g as f,n as l,p as u}from"../chunk-N4KFLTKM.js";import{isMainThread as M}from"node:worker_threads";var o={},i={};function h(r){Object.assign(o,r),Object.assign(i,w(e=>o.port.postMessage(e))),o.port.on("message",e=>i.response(e))}import{isBuiltin as g}from"node:module";var k=async(r,e,a)=>{if(e.parentURL||(r=y(r).resolved),g(r)||u({path:r,importer:e.parentURL}))return a(r,e);let t=await i.request("info",r,e.parentURL);switch(t.kind){case"esm":return e.parentURL||(o.main=t.specifier),{url:t.specifier,shortCircuit:!0,format:"module"};case"npm":{let{name:n,path:m}=l(new URL(t.specifier)),p=[n,m].filter(Boolean).join("/"),c=await a(p,e);return e.parentURL||(o.main=c.url),c}}let s=await a(t.specifier,e);return e.parentURL||(o.main=s.url),s},L=async(r,e,a)=>{try{let t=performance.now();o.eventNames.includes("resolve")&&await i.request("dispatchEvent","resolve",{specifier:r,context:e});let s=await k(r,e,a),n=performance.now()-t;return o.eventNames.includes("resolved")&&await i.request("dispatchEvent","resolved",{specifier:r,context:e,result:s,took:n}),s}catch(t){throw t}};import{isBuiltin as R}from"node:module";var N=async(r,e,a)=>{if(R(r)||f(r))return a(r,e);try{let t=await i.request("info",r),s=t.kind==="esm"&&(t.mediaType==="TypeScript"||t.mediaType==="TSX");switch(t.kind){case"esm":return{source:await d(s?t.emit:t.local),format:"module",shortCircuit:!0}}}catch(t){console.error(t.message)}return a(r,e)},T=async(r,e,a)=>{try{let t=performance.now();o.eventNames.includes("load")&&await i.request("dispatchEvent","load",{url:r,context:e});let s=await N(r,e,a),n=performance.now()-t;if(o.eventNames.includes("loaded")){let{source:m,...p}=s;await i.request("dispatchEvent","loaded",{url:r,context:e,result:p,took:n})}return s}catch(t){throw new Error(t.message)}};M&&navigator.userAgent.includes("Node")&&v({});export{h as initialize,T as load,L as resolve};
//# sourceMappingURL=data:application/json;base64,
