// debuno 0.1.18
import {
  api_default,
  esbuildResolutionToURL,
  pathToFileURL
} from "./chunk-ZU3IHHEC.js";

// node/register.ts
import module from "node:module";
import process2 from "node:process";
import { MessageChannel } from "node:worker_threads";

// shared/resolveMain.ts
import { pathToFileURL as pathToFileURL2 } from "node:url";
import process from "node:process";
import { fileURLToPath } from "node:url";
function resolveMain(url) {
  const namespaces = ["http", "https", "jsr", "npm"];
  const resolveDir = pathToFileURL2(process.cwd() + "/").href;
  const specifier = url.replace(resolveDir, "");
  const namespace = namespaces.find(
    (namespace2) => specifier.startsWith(`${namespace2}:`)
  );
  if (namespace) {
    const path2 = specifier.replace(`${namespace}:`, "");
    const resolved2 = esbuildResolutionToURL({ namespace, path: path2 }).href;
    return {
      url,
      resolveDir,
      namespace,
      path: path2,
      resolved: resolved2
    };
  }
  const path = fileURLToPath(url);
  const resolved = esbuildResolutionToURL({ namespace: "file", path }).href;
  return {
    url,
    resolveDir,
    namespace: "file",
    path,
    resolved
  };
}

// node/api.ts
function createServer(api, sendResponse) {
  async function handleRequest(req) {
    if (!req.prop || !req.id)
      throw new TypeError(`Invalid request: 
${JSON.stringify(req, null, 4)}`);
    const { id, prop, args } = req;
    const res = { id };
    try {
      res.result = typeof api[prop] === "function" ? await api[prop].apply(api, args) : api[prop];
    } catch (error) {
      res.error = error;
    }
    sendResponse(res);
  }
  return { handleRequest };
}
function createClient(sendRequest) {
  let requestId = 0;
  const promises = {};
  function request(prop, ...args) {
    const req = { id: ++requestId, prop, args };
    const { promise, resolve, reject } = Promise.withResolvers();
    sendRequest(req);
    promises[req.id] = { resolve, reject };
    return promise;
  }
  function response(res) {
    if (res.error)
      promises[res.id].reject(res.error);
    else
      promises[res.id].resolve(res.result);
    delete promises[res.id];
  }
  return {
    request,
    response,
    promises
  };
}

// node/register.ts
function register(options) {
  process2.setSourceMapsEnabled(true);
  const {
    port1,
    port2
  } = new MessageChannel();
  const { handleRequest } = createServer(api_default, (res) => port1.postMessage(res));
  port1.on("message", handleRequest);
  port1.unref();
  if (options?.onResolve) {
    api_default.addEventListener("resolve", options.onResolve);
  }
  if (options?.onResolved) {
    api_default.addEventListener("resolved", options.onResolved);
  }
  if (options?.onLoad) {
    api_default.addEventListener("load", options.onLoad);
  }
  if (options?.onLoaded) {
    api_default.addEventListener("loaded", options.onLoaded);
  }
  let main = null;
  if (process2.argv[1]) {
    main = process2.argv[1].startsWith("-") ? null : resolveMain(pathToFileURL(process2.argv[1]).href).resolved;
    if (main) {
      try {
        api_default.cacheSync(main);
      } catch (e) {
        console.log(e.message);
      }
    }
  }
  module.register("./node/index.js", {
    parentURL: import.meta.url,
    data: {
      main,
      port: port2,
      eventNames: api_default.eventNames
    },
    transferList: [port2]
  });
}

export {
  resolveMain,
  createClient,
  register
};
//# sourceMappingURL=data:application/json;base64,
